{"version":3,"sources":["AppTitle.js","DrumBank.js","Pad.js","Pads.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["AppTitle","props","class","apptitle","DrumBank","id","className","bankName","Pad","drumName","onClick","clickHandler","auto","drumKey","src","url","Pads","drums","map","drum","index","controls","name","key","Display","currentDrum","App","state","appTitle","keyList","volumeLevel","banks","bankNames","bank","handleClick","bind","handleKeyPress","handleVolumeChange","e","preventDefault","drumLetter","target","innerText","this","triggerSound","document","addEventListener","removeEventListener","toUpperCase","includes","newValue","value","setState","drumIndex","indexOf","sound","getElementById","pad","currentTime","play","activatePad","setTimeout","classList","toggle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAIeA,G,MAFE,SAACC,GAAD,OAAW,4BAAI,uBAAGC,MAAM,gBAAb,IAAiCD,EAAME,YCQpDC,EARE,SAACH,GACjB,OACC,yBAAKI,GAAG,UAAUC,UAAU,mBAC3B,uBAAGJ,MAAM,gBADV,IAC8BD,EAAMM,WCMvBC,EATH,SAACP,GACZ,OACC,yBAAKI,GAAIJ,EAAMQ,SAAUC,QAAST,EAAMU,aAAcL,UAAU,YAC/D,2BAAOM,MAAI,EAACN,UAAU,OAAOD,GAAIJ,EAAMY,QAASC,IAAKb,EAAMc,MAC1Dd,EAAMY,UCaKG,EAhBF,SAACf,GACb,OACC,yBAAKK,UAAU,oBACbL,EAAMgB,MAAM,GAAGC,KAAI,SAACC,EAAMC,GAAP,OACnB,kBAAC,EAAD,CACCT,aAAcV,EAAMU,aACpBE,QAASZ,EAAMoB,SAASD,GACxBX,SAAUU,EAAKG,KACfP,IAAKI,EAAKJ,IACVQ,IAAKJ,EAAKG,YCFAE,EARC,SAACvB,GAChB,OACC,yBAAKI,GAAG,UAAUC,UAAU,mBAC1BL,EAAMwB,cCmHKC,E,kDA/Gd,WAAYzB,GAAQ,IAAD,8BAClB,cAAMA,IAED0B,MAAQ,CACZC,SAAU,eACVC,QAAS,YACTJ,YAAa,WACbK,YAAa,GACbC,MAAO,CACN,CACC,CAAET,KAAM,OAAQP,IAAK,qCACrB,CAAEO,KAAM,OAAQP,IAAK,qCACrB,CAAEO,KAAM,QAASP,IAAK,oCACtB,CAAEO,KAAM,QAASP,IAAK,sCACtB,CAAEO,KAAM,OAAQP,IAAK,qCACrB,CAAEO,KAAM,UAAWP,IAAK,qCACxB,CAAEO,KAAM,QAASP,IAAK,sCACtB,CAAEO,KAAM,MAAOP,IAAK,oCACpB,CAAEO,KAAM,OAAQP,IAAK,sCAEtB,CACC,CAAEO,KAAM,OAAQP,IAAK,qCACrB,CAAEO,KAAM,OAAQP,IAAK,qCACrB,CAAEO,KAAM,QAASP,IAAK,oCACtB,CAAEO,KAAM,QAASP,IAAK,sCACtB,CAAEO,KAAM,OAAQP,IAAK,qCACrB,CAAEO,KAAM,UAAWP,IAAK,qCACxB,CAAEO,KAAM,QAASP,IAAK,sCACtB,CAAEO,KAAM,MAAOP,IAAK,oCACpB,CAAEO,KAAM,OAAQP,IAAK,uCAGvBiB,UAAW,CAAE,WAAY,OAEzBC,KAAM,GAGP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAvCR,E,wDA0CPG,GACXA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,UAC5BC,KAAKC,aAAaJ,K,0CAIlBK,SAASC,iBAAiB,UAAWH,KAAKP,kB,6CAI1CS,SAASE,oBAAoB,UAAWJ,KAAKP,kB,qCAG/BE,GACd,IAAME,EAAaF,EAAEf,IAAIyB,cAErBL,KAAKhB,MAAME,QAAQoB,SAAST,IAC/BG,KAAKC,aAAaJ,K,yCAIDF,GAClB,IAAMY,EAAWZ,EAAEG,OAAOU,MAC1BR,KAAKS,SAAS,CACbtB,YAAaoB,M,mCAGFV,GAAa,IAAD,OAClBa,EAAYV,KAAKhB,MAAME,QAAQyB,QAAQd,GACvC/B,EAAWkC,KAAKhB,MAAMI,MAAMY,KAAKhB,MAAMM,MAAMoB,GAAW/B,KACxDiC,EAAQV,SAASW,eAAehB,GAChCiB,EAAMZ,SAASW,eAAe/C,GAEpC8C,EAAMG,YAAc,EACpBH,EAAMI,OACNhB,KAAKS,SAAS,CACb3B,YAAahB,IAGdkC,KAAKiB,YAAYH,GACjBI,YAAW,kBAAM,EAAKD,YAAYH,KAAM,O,kCAI7BA,GACXA,EAAIK,UAAUC,OAAO,qB,+BAIrB,OACC,yBAAKzD,UAAU,OACd,4BAAQD,GAAG,eAAeC,UAAU,cACnC,kBAAC,EAAD,CAAUH,SAAUwC,KAAKhB,MAAMC,WAC/B,yBAAKtB,UAAU,eACd,kBAAC,EAAD,CAAUC,SAAUoC,KAAKhB,MAAMK,UAAUW,KAAKhB,MAAMM,QACpD,kBAAC,EAAD,CACCtB,aAAcgC,KAAKT,YACnBb,SAAUsB,KAAKhB,MAAME,QACrBZ,MAAO,CAAE0B,KAAKhB,MAAMI,MAAMY,KAAKhB,MAAMM,SAEtC,kBAAC,EAAD,CAASR,YAAakB,KAAKhB,MAAMF,qB,GAxGrBuC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAED5B,SAASW,eAAe,SDyHnB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bf9975d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst AppTitle = (props) => <h1><i class=\"fas fa-drum\"></i> {props.apptitle}</h1>;\n\nexport default AppTitle;\n","import React from 'react';\n\nconst DrumBank = (props) => {\n\treturn (\n\t\t<div id=\"display\" className=\"darkbox display\">\n\t\t\t<i class=\"fas fa-cogs\"></i> {props.bankName}\n\t\t</div>\n\t);\n};\n\nexport default DrumBank;\n","import React from 'react';\n\nconst Pad = (props) => {\n\treturn (\n\t\t<div id={props.drumName} onClick={props.clickHandler} className=\"drum-pad\">\n\t\t\t<audio auto className=\"clip\" id={props.drumKey} src={props.url} />\n\t\t\t{props.drumKey}\n\t\t</div>\n\t);\n};\n\nexport default Pad;\n","import React from 'react';\nimport Pad from './Pad.js';\n\nconst Pads = (props) => {\n\treturn (\n\t\t<div className=\"darkbox controls\">\n\t\t\t{props.drums[0].map((drum, index) => (\n\t\t\t\t<Pad\n\t\t\t\t\tclickHandler={props.clickHandler}\n\t\t\t\t\tdrumKey={props.controls[index]}\n\t\t\t\t\tdrumName={drum.name}\n\t\t\t\t\turl={drum.url}\n\t\t\t\t\tkey={drum.name}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Pads;\n","import React from 'react';\n\nconst Display = (props) => {\n\treturn (\n\t\t<div id=\"display\" className=\"darkbox display\">\n\t\t\t{props.currentDrum}\n\t\t</div>\n\t);\n};\n\nexport default Display;\n","import React from 'react';\nimport './App.css';\nimport AppTitle from './AppTitle.js';\nimport DrumBank from './DrumBank';\nimport Pads from './Pads.js';\nimport VolumeControl from './VolumeControl';\nimport Display from './Display.js';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tappTitle: 'Drum Machine',\n\t\t\tkeyList: 'QWEASDZXC',\n\t\t\tcurrentDrum: 'the drum',\n\t\t\tvolumeLevel: 75,\n\t\t\tbanks: [\n\t\t\t\t[\n\t\t\t\t\t{ name: 'clap', url: './samples/Clap03 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'snap', url: './samples/Snap02 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'hihat', url: './samples/CHH07 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'crash', url: './samples/Crash10 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'ride', url: './samples/Ride02 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'ridecup', url: './samples/Ride03 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'snare', url: './samples/Snare22 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'tom', url: './samples/Tom28 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'kick', url: './samples/Kick01 Drums1DOTcom.wav' }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ name: 'clap', url: './samples/Clap03 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'snap', url: './samples/Snap02 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'hihat', url: './samples/CHH07 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'crash', url: './samples/Crash10 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'ride', url: './samples/Ride02 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'ridecup', url: './samples/Ride03 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'snare', url: './samples/Snare22 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'tom', url: './samples/Tom28 Drums1DOTcom.wav' },\n\t\t\t\t\t{ name: 'kick', url: './samples/Kick01 Drums1DOTcom.wav' }\n\t\t\t\t]\n\t\t\t],\n\t\t\tbankNames: [ 'Acoustic', 'Fun' ],\n\n\t\t\tbank: 0\n\t\t};\n\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\n\t\tthis.handleVolumeChange = this.handleVolumeChange.bind(this);\n\t}\n\n\thandleClick(e) {\n\t\te.preventDefault();\n\t\tconst drumLetter = e.target.innerText;\n\t\tthis.triggerSound(drumLetter);\n\t}\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener('keydown', this.handleKeyPress);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener('keydown', this.handleKeyPress);\n\t}\n\n\thandleKeyPress(e) {\n\t\tconst drumLetter = e.key.toUpperCase();\n\n\t\tif (this.state.keyList.includes(drumLetter)) {\n\t\t\tthis.triggerSound(drumLetter);\n\t\t}\n\t}\n\n\thandleVolumeChange(e) {\n\t\tconst newValue = e.target.value;\n\t\tthis.setState({\n\t\t\tvolumeLevel: newValue\n\t\t});\n\t}\n\ttriggerSound(drumLetter) {\n\t\tconst drumIndex = this.state.keyList.indexOf(drumLetter);\n\t\tconst drumName = this.state.banks[this.state.bank][drumIndex].name;\n\t\tconst sound = document.getElementById(drumLetter);\n\t\tconst pad = document.getElementById(drumName);\n\n\t\tsound.currentTime = 0;\n\t\tsound.play();\n\t\tthis.setState({\n\t\t\tcurrentDrum: drumName\n\t\t});\n\t\t// document.getElementById(drumName).classList.toggle('drum-pad-active');\n\t\tthis.activatePad(pad);\n\t\tsetTimeout(() => this.activatePad(pad), 100);\n\t\t// document.getElementById(drumName).classList.toggle('drum-pad-active');\n\t}\n\n\tactivatePad(pad) {\n\t\tpad.classList.toggle('drum-pad-active');\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header id=\"drum-machine\" className=\"App-header\">\n\t\t\t\t\t<AppTitle apptitle={this.state.appTitle} />\n\t\t\t\t\t<div className=\"control-box\">\n\t\t\t\t\t\t<DrumBank bankName={this.state.bankNames[this.state.bank]} />\n\t\t\t\t\t\t<Pads\n\t\t\t\t\t\t\tclickHandler={this.handleClick}\n\t\t\t\t\t\t\tcontrols={this.state.keyList}\n\t\t\t\t\t\t\tdrums={[ this.state.banks[this.state.bank] ]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Display currentDrum={this.state.currentDrum} />\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n{\n\t/* <VolumeControl changeHandler={this.handleVolumeChange} volumeLevel={this.state.volumeLevel} /> */\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}